# Nombre de la aplicación
spring.application.name=wrapperGemini

# ===============================
# CONFIGURACIÓN DE BASE DE DATOS
# ===============================
# Configuración para la base de datos H2 embebida
# URL de conexión, utilizando un archivo local para persistencia
spring.datasource.url=jdbc:h2:file:${DB_PATH}
# Driver JDBC para H2
spring.datasource.driverClassName=org.h2.Driver
# Credenciales de acceso (usando variables de entorno)
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
# Dialecto JPA para H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Habilitar consola web de H2
spring.h2.console.enabled=true
# Ruta de acceso para la consola
spring.h2.console.path=/h2-console
# Modo de actualización del esquema (update: actualiza automáticamente)
spring.jpa.hibernate.ddl-auto=update

# ===============================
# CONFIGURACIÓN DE GEMINI API
# ===============================
# Utilizando variables de entorno del archivo .env
# Clave API para acceder a Gemini (inyectada desde variable de entorno)
gemini.api.key=${GEMINI_API_KEY}
# Modelo de Gemini a utilizar
gemini.model=${GEMINI_MODEL}

# ===============================
# CONFIGURACIÓN DE SEGURIDAD
# ===============================
# Necesario habilitar para acceder a la consola H2 cuando se ejecuta en Docker, ya que las conexiones desde el host al contenedor son consideradas "remotas"
spring.h2.console.settings.web-allow-others=true

# Configuración del servidor
server.port=8080

# Configuración de cookies seguras
# HttpOnly: evita acceso desde JavaScript
server.servlet.session.cookie.http-only=true
# Secure: requiere HTTPS para las cookies
server.servlet.session.cookie.secure=true

# Configuración de Thymeleaf
spring.thymeleaf.cache=false
